name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GOOGLE_PROJECT_ID: "peak-lattice-447302-b9"
  GOOGLE_COMPUTE_ZONE: "europe-west1-b"
  SPRING_IMAGE_NAME: "europe-west1-docker.pkg.dev/peak-lattice-447302-b9/docker-registry/spring-backend"
  ANGULAR_IMAGE_NAME: "europe-west1-docker.pkg.dev/peak-lattice-447302-b9/docker-registry/angular-frontend"

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 18
        uses: actions/setup-java@v4
        with:
          java-version: '18'
          distribution: 'adopt'
          cache: 'maven'
      
      - name: Build with Maven
        run: |
          cd src/app/Backend
          mvn clean package -DskipTests
      
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: src/app/Backend/target/*.jar

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 18
        uses: actions/setup-java@v4
        with:
          java-version: '18'
          distribution: 'adopt'
          cache: 'maven'
      
      - name: Test with Maven
        run: |
          cd src/app/Backend
          mvn test -X
      
      - name: Upload Test Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: src/app/Backend/target/surefire-reports/

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Clear npm cache
        run: npm cache clean --force
        
      - name: Remove package-lock.json
        run: rm -f package-lock.json
      
      - name: Install dependencies
        run: npm install
      
      - name: Build
        run: npm run build --configuration=production
      
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        
      - name: Install dependencies
        run: |
          npm install
          npm install karma-junit-reporter@2.0.1 xmlbuilder@12.0.0
        
      - name: Create test environment configuration
        run: |
          cat > src/environments/environment.test.ts << EOL
          export const environment = {
            production: false,
            apiUrl: 'http://mock-api'
          };
          EOL
        
      - name: Run tests
        run: |
          export NODE_ENV=test
          npm run test -- \
            --no-watch \
            --no-progress \
            --browsers=ChromeHeadless \
            --karma-config=karma.conf.js

  docker-backend:
    needs: [build-backend, test-backend]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: src/app/Backend/target/
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_KEY }}'
          create_credentials_file: true
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet
      
      - name: Build and Push Image
        run: |
          IMAGE_TAG="europe-west1-docker.pkg.dev/${{ env.GOOGLE_PROJECT_ID }}/docker-registry/spring-backend:${{ github.sha }}"
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG -f docker/backend/Dockerfile .
          echo "Pushing image to Artifact Registry..."
          docker push $IMAGE_TAG

  docker-frontend:
    needs: [build-frontend, test-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download frontend dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_KEY }}'
          create_credentials_file: true
      
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
      
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet
      
      - name: Build and Push Image
        run: |
          IMAGE_TAG="europe-west1-docker.pkg.dev/${{ env.GOOGLE_PROJECT_ID }}/docker-registry/angular-frontend:${{ github.sha }}"
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG -f docker/frontend/Dockerfile .
          echo "Pushing image to Artifact Registry..."
          docker push $IMAGE_TAG

  deploy:
    needs: [docker-backend, docker-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_KEY }}'
          
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy spring-backend \
            --image ${{ env.SPRING_IMAGE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region europe-west1 \
            --allow-unauthenticated
            
          gcloud run deploy angular-frontend \
            --image ${{ env.ANGULAR_IMAGE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region europe-west1 \
            --allow-unauthenticated

